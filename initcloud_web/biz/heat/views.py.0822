#-*-coding-utf-8-*-

# Author Yang

from datetime import datetime
import logging

from rest_framework import generics
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view
from django.conf import settings
from django.contrib.auth.models import User
from django.utils.translation import ugettext_lazy as _
from django.utils import timezone
from django.contrib.auth.models import check_password

from biz.account.settings import QUOTA_ITEM, NotificationLevel
from biz.heat.models import Heat 
from biz.heat.serializer import HeatSerializer
from biz.heat.utils import * 
from biz.idc.models import DataCenter
from biz.common.pagination import PagePagination
from biz.common.decorators import require_POST, require_GET
from biz.common.utils import retrieve_params, fail
from biz.workflow.models import Step
from cloud.tasks import (link_user_to_dc_task, send_notifications,
                         send_notifications_by_data_center)
from frontend.forms import CloudUserCreateFormWithoutCapatcha

from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from biz.image.models import Image
LOG = logging.getLogger(__name__)


class HeatList(generics.ListAPIView):
    LOG.info("--------- I am heat list in HeatList ----------")
    queryset = Heat.objects.all()
    LOG.info("--------- Queryset is --------------" + str(queryset)) 
    serializer_class = HeatSerializer



@require_POST
def create_heat(request):
    LOG.info("------------------ HEAT CREATE ----------------")
    try:
        LOG.info(request.data)
	serializer = HeatSerializer(data=request.data, context={"request": request})
        if serializer.is_valid():
            heat = serializer.save()
	    LOG.info(heat)
            files = request.data.get('file')
            LOG.info("*** files are ***" + str(files))
            file_name = files.name
            real_name = file_name.split(".")[0]
	    des = '/data/' + str(real_name) + "_" + str(heat.id) + ".template"
            LOG.info("*** des is " + str(des))
	    with open(str(des),"wb+") as destination:
	        destination.write(request.data.get('file').read())
            heat.file_path = des
	    #heat.image_name = heat.image.name
	    #LOG.info(heat.image_name)
	    try:
		start_date = request.data['start_date']
            	start_time = datetime.strptime(start_date, "%m/%d/%Y").date()
	    	heat.start_date = start_time
	    except:
		pass
	    heat.save()
            return Response({'success': True, "msg": _('Heat is created successfully!')},
                            status=status.HTTP_201_CREATED)
        else:
            return Response({"success": False, "msg": _('Heat data is not valid!'),
                             'errors': serializer.errors},
                            status=status.HTTP_400_BAD_REQUEST)
    except Exception as e:

        LOG.error("Failed to create heat, msg:[%s]" % e)
        return Response({"success": False, "msg": _('Failed to create heat for unknown reason.')})



@api_view(["POST"])
def delete_heats(request):
    try:
	ids = request.data.getlist('ids[]')
    	LOG.info(ids)
    	Heat.objects.filter(pk__in=ids).delete()
    	return Response({'success': True, "msg": _('Heats have been deleted!')}, status=status.HTTP_201_CREATED)
    except Exception as e:
	LOG.error("Failed to delete heat, msg:[%s]" % e)
        return Response({"success": False, "msg": _('Failed to delete heat for unknown reason.')})


@api_view(['POST'])
def update_heat(request):
    try:

        pk = request.data['id']
        LOG.info("---- heat pk is --------" + str(pk))

        heat = Heat.objects.get(pk=pk)
        LOG.info("request.data is" + str(request.data))
        heat.heatname = request.data['heatname']
	heat.description = request.data['description']
        heat.save()
        #Operation.log(heat, heat.name, 'update', udc=heat.udc,
        #              user=request.user)

        return Response(
            {'success': True, "msg": _('Heat is updated successfully!')},
            status=status.HTTP_201_CREATED)

    except Exception as e:
        LOG.error("Failed to update heat, msg:[%s]" % e)
        return Response({"success": False, "msg": _(
            'Failed to update heat for unknown reason.')})


@require_GET
def is_heatname_unique(request):
    heatname = request.GET['heatname']
    LOG.info("heatname is" + str(heatname))
    return Response(not Heat.objects.filter(heatname=heatname).exists())
